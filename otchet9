Работа с pipe. Часть 1

Для работы с пайпом можно воспользоваться ситсемными вызовами write() для записи и read() для чтения аналогично тому, как это делалось для записи в файл и чтения из файла. Различая в том, что при чтении из файла информация не исчезает, а байт. пройитанный из пайпа удаляется.
Для создания пайпа используется системный вызов pipe(), которому в качестве параметра должен быть передан массив из двух целых чисел. Элемент массива с индексом 0 используется как файловый дескриптор для чтенрия, а элемент с индексом 1 используется для записи.
Пример:
int fd[2];
pipe(fd);

таблица файловых дескрипторов наследуется дочерным процессом от родительского \, поэтом процесс-ребенок может отправлять информацию через пайп любому своих предков, как же, как и читать информацию, отправленную ими в пайп.
Пайп существует до тех пор, пока хотя бы один из его потоков не закрыт. Для этого нужно, чтобы каждый родственыый проццес завершил работу, или процесс работы явно закрыл входной и выходной потоки.

Работа с pipe. Часть 2
Двунаправленная связь между родственными процессами 

Для организации двунаправленной связи легче всего использовать два отдльных канада связи - пайп1 и пайп2. Пайп1 будет передовать инофрмацию от процесса-родителя процессу-ребенку, а пайпр2 - в обратном направлении.
Файловые дескрипторы разных пайпов будем хранить в массивах fd1 и fd2.
Для родительского процесса сразу закрываем входной поток пайп1 (close(fd1[0])), а также выходной поток пайп2 (clode(fd2[1]))
Для дочерного процесса закрываем выходной поток пайп1 и входной поток пайп2
После записи информации в пайп родительского процесса выполняется чтение информации из пайп2, при этом дочерный процесс еще ничвго не записал в пайп2. Поэтому родительский процесс при попытке чтения из пайп2 блокируется и ждет появления информации.
Информация от дочерного процесса в пайп2 появяется после того, как процесс-ребенок прочитает информацию из пайп1.
Поэтому дочерный процесс заканчивает работу раньше, чем процесс-родитель прочитает информацию от него из пайп2.
